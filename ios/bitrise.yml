format_version: '13'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: react-native
workflows:
  primary:
    steps:
    - git-clone@8: {}
    - script@1:
        title: Create Keychain
        inputs:
          - content: |-
              #!/bin/bash
              set -ex
              security delete-keychain login.keychain-db || true
              security create-keychain -p "$BITRISE_KEYCHAIN_PASSWORD" login.keychain-db
              security default-keychain -s login.keychain-db
              security unlock-keychain -p "$BITRISE_KEYCHAIN_PASSWORD" login.keychain-db
              security set-keychain-settings -t 3600 -l login.keychain-db
    - certificate-and-profile-installer@1:
        inputs:
          - certificate_url: "file://./ios/distribution.p12"
          - certificate_passphrase: "$CERTIFICATE_PASSWORD"
          - provisioning_profile_url: "file://./ios/profile.mobileprovision"
          - keychain_path: "$HOME/Library/Keychains/login.keychain-db"
          - keychain_password: "$BITRISE_KEYCHAIN_PASSWORD"
          - team_id: "$BITRISE_TEAM_ID"
    - script@1:
        title: Install Dependencies
        inputs:
          - content: |-
              #!/bin/bash
              set -ex

              # Install Node.js dependencies
              npm install

              # Install iOS dependencies using CocoaPods
              cd ios
              pod install --repo-update

              # Copy custom Hermes files
              HERMES_SOURCE="./AppSealingSDK/hermes"
              HERMES_DEST=$(find "./Pods/hermes-engine/destroot/Library/Frameworks/universal" -type f -name "hermes" -print | head -n 1)
              if [ -z "$HERMES_DEST" ]; then
                  echo "Error: Could not find hermes binary in universal directory"
                  exit 1
              fi

              # Copy custom hermes file
              cp "$HERMES_SOURCE" "$HERMES_DEST"
    - script@1:
        title: Set Project Path and Scheme
        inputs:
          - content: |-
              #!/bin/bash
              set -ex

              # Automatically find the workspace path
              WORKSPACE_PATH=$(find "$BITRISE_SOURCE_DIR/ios" -name "*.xcworkspace" | head -n 1)

              if [ -z "$WORKSPACE_PATH" ]; then
                echo "Error: No .xcworkspace file found in the iOS directory."
                exit 1
              fi

              # Automatically find the scheme name
              SCHEME=$(xcodebuild -workspace "$WORKSPACE_PATH" -list | grep -A 1 "Schemes:" | tail -n 1 | xargs)

              if [ -z "$SCHEME" ]; then
                echo "Error: No scheme found in the workspace."
                exit 1
              fi

              # Set environment variables for Bitrise steps
              envman add --key BITRISE_WORKSPACE_PATH --value "$WORKSPACE_PATH"
              envman add --key BITRISE_SCHEME --value "$SCHEME"

              echo "iOS Workspace Path: $WORKSPACE_PATH"
              echo "iOS Scheme: $SCHEME"
    - script@1:
        title: Update Build Number (iOS)
        inputs:
          - content: |-
              #!/bin/bash
              set -ex

              # Find the .xcodeproj file dynamically
              XCODEPROJ_PATH=$(find "$BITRISE_SOURCE_DIR/ios" -name "*.xcodeproj" | head -n 1)

              if [ -z "$XCODEPROJ_PATH" ]; then
                echo "Error: Xcode project file not found."
                exit 1
              fi

              echo "Xcode project path: $XCODEPROJ_PATH"

              # Update build number using agvtool
              cd "$(dirname "$XCODEPROJ_PATH")"
              agvtool new-version -all "$BITRISE_BUILD_NUMBER"
    - xcode-archive@5:
        inputs:
          - project_path: "$BITRISE_WORKSPACE_PATH"
          - scheme: "$BITRISE_SCHEME"
          - distribution_method: app-store
          - automatic_code_signing: api-key
          - configuration: Release
          - certificate_url_list: "file://./ios/distribution.p12"
          - passphrase_list: "$CERTIFICATE_PASSWORD"
    - script@1:
        title: Extract Bundle ID
        inputs:
          - content: |-
              #!/bin/bash
              set -ex

              # Extract the Bundle ID from the workspace and scheme
              BUNDLE_ID=$(xcodebuild -showBuildSettings -workspace "$BITRISE_WORKSPACE_PATH" -scheme "$BITRISE_SCHEME" | grep PRODUCT_BUNDLE_IDENTIFIER | awk -F ' = ' '{print $2}' | tail -n 1)

              if [ -z "$BUNDLE_ID" ]; then
                echo "Error: Failed to extract Bundle ID."
                exit 1
              fi

              # Export the Bundle ID as an environment variable for later steps
              envman add --key BITRISE_APP_BUNDLE_ID --value "$BUNDLE_ID"

              echo "Extracted Bundle ID: $BUNDLE_ID"
    - script@1:
        title: Run Generate Hash
        inputs:
          - content: |-
              #!/bin/bash
              set -ex
              cd "$BITRISE_SOURCE_DIR"
              chmod +x ./AppSealingSDK/Tools/generate_hash
              ./AppSealingSDK/Tools/generate_hash "$BITRISE_IPA_PATH"
    - deploy-to-itunesconnect-deliver@2:
        inputs:
          - ipa_path: "$BITRISE_IPA_PATH"
          - bundle_id: "$BITRISE_APP_BUNDLE_ID"
    - deploy-to-bitrise-io@2: {}
    triggers:
      push:
      - branch: main
      pull_request:
      - source_branch: "*"
meta:
  bitrise.io:
    stack: osx-xcode-16.0.x
    machine_type_id: g2-m1.4core
app:
  envs:
  - BITRISE_KEYCHAIN_PASSWORD: anything
  - BITRISE_TEAM_ID: 22X77ENQ2H
  - CERTIFICATE_PASSWORD: 123456
